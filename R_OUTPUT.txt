> library(caret)
Loading required package: lattice
Loading required package: ggplot2
Warning messages:
1: package ‘caret’ was built under R version 3.2.5 
2: package ‘ggplot2’ was built under R version 3.2.5 
> library(rpart)
Warning message:
package ‘rpart’ was built under R version 3.2.5 
> library(rpart.plot)
Warning message:
package ‘rpart.plot’ was built under R version 3.2.5 
> library(RColorBrewer)
Warning message:
package ‘RColorBrewer’ was built under R version 3.2.5 
> library(rattle)
Rattle: A free graphical interface for data mining with R.
Version 4.1.0 Copyright (c) 2006-2015 Togaware Pty Ltd.
Type 'rattle()' to shake, rattle, and roll your data.
Warning message:
package ‘rattle’ was built under R version 3.2.5 
> library(randomForest)
randomForest 4.6-12
Type rfNews() to see new features/changes/bug fixes.

Attaching package: ‘randomForest’

The following object is masked from ‘package:ggplot2’:

    margin
> 
> setwd("C:/COURSERA/DS/PROJECT/08_PROJECT")
> 
> training <- read.csv("pml-training.csv",na.strings=c("NA","#DIV/0!", ""))
> 
> dim ( training  )
[1] 19622   160
> 
> testing <- read.csv("pml-testing.csv",na.strings=c("NA","#DIV/0!", ""))
> 
> dim ( testing  )
[1]  20 160
> 
> training <-training[,colSums(is.na(training)) == 0]
> testing <-testing[,colSums(is.na(testing)) == 0]
> 
> training   <-training[,-c(1:7)]
> testing <-testing[,-c(1:7)]
> 
> dim ( training ) 
[1] 19622    53
> 
> dim ( testing  )
[1] 20 53
> 
> 
> ColumnsZVar <- nearZeroVar(training, saveMetrics = TRUE)
> training <- training[, ColumnsZVar$nzv==FALSE]
> training$classe = factor(training$classe)
> 
> set.seed(1234)
> subTrain <- createDataPartition(y=training$classe, p=.75, list=FALSE)
> 
> TheTraining <- training[subTrain, ]
> TheTesting <- training[-subTrain, ]
> 
> modelDT <- rpart(classe ~ ., data=TheTraining, method="class")
> 
> predictionDT <- predict(modelDT, TheTesting, type ="class")
> 
> rpart.plot(modelDT, main="Decision Tree ", extra=102, under=TRUE, faclen=0)
> fancyRpartPlot (modelDT, main="Decision Tree")confusionMatrix(predictionDT,TheTesting$classe)

> confusionMatrix(predictionDT,TheTesting$classe)
Confusion Matrix and Statistics

          Reference
Prediction    A    B    C    D    E
         A 1235  157   16   50   20
         B   55  568   73   80  102
         C   44  125  690  118  116
         D   41   64   50  508   38
         E   20   35   26   48  625

Overall Statistics
                                          
               Accuracy : 0.7394          
                 95% CI : (0.7269, 0.7516)
    No Information Rate : 0.2845          
    P-Value [Acc > NIR] : < 2.2e-16       
                                          
                  Kappa : 0.6697          
 Mcnemar's Test P-Value : < 2.2e-16       

Statistics by Class:

                     Class: A Class: B Class: C Class: D Class: E
Sensitivity            0.8853   0.5985   0.8070   0.6318   0.6937
Specificity            0.9307   0.9216   0.9005   0.9529   0.9678
Pos Pred Value         0.8356   0.6469   0.6313   0.7247   0.8289
Neg Pred Value         0.9533   0.9054   0.9567   0.9296   0.9335
Prevalence             0.2845   0.1935   0.1743   0.1639   0.1837
Detection Rate         0.2518   0.1158   0.1407   0.1036   0.1274
Detection Prevalence   0.3014   0.1790   0.2229   0.1429   0.1538
Balanced Accuracy      0.9080   0.7601   0.8537   0.7924   0.8307
> 
> 
> modelRF <- randomForest(classe ~. , data=TheTraining, method="class")
> print (modelRF)

Call:
 randomForest(formula = classe ~ ., data = TheTraining, method = "class") 
               Type of random forest: classification
                     Number of trees: 500
No. of variables tried at each split: 7

        OOB estimate of  error rate: 0.43%
Confusion matrix:
     A    B    C    D    E  class.error
A 4182    3    0    0    0 0.0007168459
B   15 2830    3    0    0 0.0063202247
C    0   11 2553    3    0 0.0054538372
D    0    0   17 2393    2 0.0078772803
E    0    0    2    7 2697 0.0033259424
> 
> 
> 
> predictionRF <- predict(modelRF, TheTesting, type = "class")
> 
> confusionMatrix(predictionRF, TheTesting$classe)
Confusion Matrix and Statistics

          Reference
Prediction    A    B    C    D    E
         A 1395    2    0    0    0
         B    0  945    9    0    0
         C    0    2  844    6    0
         D    0    0    2  798    0
         E    0    0    0    0  901

Overall Statistics
                                          
               Accuracy : 0.9957          
                 95% CI : (0.9935, 0.9973)
    No Information Rate : 0.2845          
    P-Value [Acc > NIR] : < 2.2e-16       
                                          
                  Kappa : 0.9946          
 Mcnemar's Test P-Value : NA              

Statistics by Class:

                     Class: A Class: B Class: C Class: D Class: E
Sensitivity            1.0000   0.9958   0.9871   0.9925   1.0000
Specificity            0.9994   0.9977   0.9980   0.9995   1.0000
Pos Pred Value         0.9986   0.9906   0.9906   0.9975   1.0000
Neg Pred Value         1.0000   0.9990   0.9973   0.9985   1.0000
Prevalence             0.2845   0.1935   0.1743   0.1639   0.1837
Detection Rate         0.2845   0.1927   0.1721   0.1627   0.1837
Detection Prevalence   0.2849   0.1945   0.1737   0.1631   0.1837
Balanced Accuracy      0.9997   0.9968   0.9926   0.9960   1.0000
> 
> answers<- as.vector(predictionRF[1:20])
> pml_write_files  =  function ( x ) { 
+   n  =  length ( x ) 
+   for ( i  in  1 : n ) { 
+     filename  =  paste0 ( "problem_id_" , i , ".txt" ) 
+     write.table ( x [ i ] , file = filename , quote = FALSE , row.names = FALSE , col.names = FALSE ) 
+   } 
+ }
> 
> pml_write_files ( answers )
> 
> 
